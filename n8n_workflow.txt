{
  "name": "ChateaConMiCV",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.compiledContext}}",
        "options": {
          "systemMessage": "Actúas como un asistente tipo chat interactivo que representa a Álvaro. Usa SOLO el CONTEXTO – FUENTES para hechos. La “Descripción del cargo” es contexto NO factual (solo tono/enfoque).\n\nReglas:\nUsa SOLO el CONTEXTO – FUENTES. Prioridad: Q&A > CV. No inventes.\nSi [SCORE] == 0: pide UNA aclaración breve (p. ej.: “¿Qué aspecto te interesa: experiencia, habilidades o proyectos?”).\nSi [SCORE] >= 1: responde usando el contexto; si faltan datos, di: “No encuentro esa información en mis fuentes.”\nEstilo: español claro y cercano; 3–6 líneas o viñetas breves; sin prefacios ni meta‑comentarios.\nResponde solo texto plano.\n",
          "returnIntermediateSteps": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1008,
        0
      ],
      "id": "061c9612-c4a9-4c02-835b-77c320f2d3ae",
      "name": "AI Agent",
      "alwaysOutputData": true,
      "retryOnFail": false,
      "notesInFlow": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.respuesta }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "https://alvarocruit.github.io"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1488,
        0
      ],
      "id": "5be25c00-9b05-432c-83af-89f09c90096d",
      "name": "Respond to Webhook",
      "alwaysOutputData": true,
      "retryOnFail": false,
      "notesInFlow": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {
          "maxTokens": 250,
          "responseFormat": "text",
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1008,
        192
      ],
      "id": "adbf885c-93bf-4319-8eb3-6de820ba24f4",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "eH4hNwEbYrV6aQkQ",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/AlvaRocruIT/ChateaConMiCV/main/data/cv.txt",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text",
              "outputPropertyName": "cv"
            }
          },
          "timeout": 20000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -256,
        0
      ],
      "id": "62f5ceee-a0c4-4918-9bec-cd1a8c6bf184",
      "name": "Request cv.txt",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/AlvaRocruIT/ChateaConMiCV/main/data/qa.json",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        96,
        0
      ],
      "id": "3951832f-fb12-4f7a-9f8a-2a8e0eceef6d",
      "name": "Request Q&A.json",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/AlvaRocruIT/ChateaConMiCV/main/data/role.txt",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text",
              "outputPropertyName": "role"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        656,
        0
      ],
      "id": "4299bef9-ba08-47e1-9c60-584edde88b97",
      "name": "Request Role.txt",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## I'm a note:\n\n$body = @{ text = \"personas\" } | ConvertTo-Json\nInvoke-RestMethod -Method POST -Uri 'https://alvarovargas.app.n8n.cloud/webhook-test/ChateaConMiCV' -ContentType 'application/json' -Body $body"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -176,
        176
      ],
      "typeVersion": 1,
      "id": "3364e3a3-6cea-44c2-b24e-4e4402f70b52",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "const qaItems = $input.all();\nconst questionRaw = String(qaItems[0]?.json?.text || \"\");\n\nfunction normalize(s){ return s.normalize('NFD').replace(/[\\u0300-\\u036f]/g,'').toLowerCase(); }\nfunction tokens(s){ return normalize(s).split(/[^a-z0-9]+/).filter(Boolean); }\n\nconst stop = new Set(['de','la','el','y','en','a','un','una','para','que','con','los','las','del','al','por','se','es','lo','mi','su','tu','como','sobre','que','cual','donde','cuando']);\nconst qTokens = tokens(questionRaw).filter(t => !stop.has(t));\nconst qSet = new Set(qTokens);\n\nfunction scoreQA(it){\n  const merged = `${it.q ?? it.Q ?? \"\"} ${it.a ?? it.A ?? \"\"}`;\n  const tks = tokens(merged);\n  let s = 0;\n  for (const t of tks) if (qSet.has(t)) s++;\n  const nq = normalize(questionRaw), nm = normalize(merged);\n  if (nq.length >= 8 && nm.includes(nq)) s += 3;\n  return s;\n}\n\nconst qaArray = qaItems.map(i => i.json);\nconst rankedRaw = qaArray.map(it => ({ ...it, _score: scoreQA(it) }))\n  .sort((a,b) => b._score - a._score)\n  .slice(0,3);\n\nconst ranked = rankedRaw.map(it => ({\n  q: String((it.q ?? it.Q) || \"\").trim(),\n  a: String((it.a ?? it.A) || \"\").replace(/\\s+/g,\" \").trim().slice(0,280),\n  _score: it._score\n}));\n\nconst topScore = ranked[0]?._score || 0;\nconst qaSelectedString = topScore > 0\n  ? ranked.map((it,i)=>`Q${i+1}: ${it.q}\\nA${i+1}: ${it.a}`).join(\"\\n\\n\")\n  : \"\";\n\nreturn [{ json: { qaSelected: ranked, qaSelectedString, topScore } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        0
      ],
      "id": "2de7c682-983c-4b91-ad17-d69b72687b58",
      "name": "Select QA"
    },
    {
      "parameters": {
        "jsCode": "const item = $input.item;\n\nconst question = String($node[\"Carry Text\"].json.text || \"\").toLowerCase();\nconst cvFull = String($json.cv || \"\");\nif (!cvFull) {\n  item.json.cvRecortado = \"\";\n  return item;\n}\n\nconst paragraphs = cvFull.split(/\\n{2,}/);\n\nconst words = Array.from(new Set(\n  question.split(/[^a-záéíóúüñ0-9]+/i).filter(Boolean)\n)).slice(0, 12);\n\nfunction score(p) {\n  const t = p.toLowerCase();\n  return words.reduce((s, w) => s + (t.includes(w) ? 1 : 0), 0);\n}\n\nconst top = paragraphs\n  .map(p => ({ p: p.replace(/\\s+/g, \" \").trim(), s: score(p) }))\n  .sort((a, b) => b.s - a.s)\n  .slice(0, 4)\n  .map(x => x.p);\n\nitem.json.cvRecortado = top.join(\"\\n\\n\").slice(0, 2000);\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        0
      ],
      "id": "ce713b20-1562-4a53-884c-bb3956bbf65a",
      "name": "Recortar CV"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "459fddf6-4adb-4bc3-8b7c-d426742d5dc6",
              "name": "compiledContext",
              "value": "=[CV] {{$node[\"Recortar CV\"].json.cvRecortado || $node[\"Request cv.txt\"].json.cv}} \n[QAS] {{$node[\"Select QA\"].json.qaSelectedString || \"\"}}\n[ROL (NO FACTUAL)] {{($node[\"Request Role.txt\"].json.role || \"\").substring(0,1200)}} \n[PREGUNTA] {{$node[\"Carry Text\"].json.text || \"\"}}\n[SCORE] {{$node[\"Select QA\"].json.topScore || 0}}",
              "type": "string"
            },
            {
              "id": "e56a2d30-f59e-434e-a950-76cc17330792",
              "name": "SCORE",
              "value": "={{$node[\"Select QA\"].json.topScore || 0}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        832,
        0
      ],
      "id": "eba88b54-3427-4f0e-bf05-e4a80e300fba",
      "name": "Build context"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ChateaConMiCV",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "https://alvarocruit.github.io",
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "https://alvarocruit.github.io"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -576,
        0
      ],
      "id": "f3fb2ff6-0a27-4ec7-917f-eb6ada5e6303",
      "name": "Webhook",
      "webhookId": "0a0f1b8f-da1f-4d26-ba86-e5e229e1e48c"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f001d721-4013-4fcc-92dc-5accb585ce8b",
              "name": "respuesta",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1312,
        0
      ],
      "id": "77cedf59-098c-4fb6-859f-1826871fea47",
      "name": "Normalize Outputs"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "98eeb138-49e3-4584-8563-715c8bcde7d4",
              "name": "text",
              "value": "={{ $json.body.text }}",
              "type": "string"
            },
            {
              "id": "74366843-ccd1-44df-a260-fb5d93acc8e3",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -416,
        0
      ],
      "id": "e5493bd6-9fb5-4567-a079-ffac43a653d0",
      "name": "Carry Text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d11f7b3d-4d53-4799-af87-6925e325f1d8",
              "name": "text",
              "value": "={{ $('Carry Text').item.json.text }}",
              "type": "string"
            },
            {
              "id": "69613192-ee91-46ba-abee-1d27a434821a",
              "name": "q",
              "value": "={{ $json.q }}",
              "type": "string"
            },
            {
              "id": "aafa72be-58d7-422c-98a1-e0fb26f87d5d",
              "name": "a",
              "value": "={{ $json.a }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        304,
        0
      ],
      "id": "60ea1ab1-d020-4d86-aa8b-6125f8a2cbc0",
      "name": "Attach Text"
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Normalize Outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Request cv.txt": {
      "main": [
        [
          {
            "node": "Recortar CV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request Q&A.json": {
      "main": [
        [
          {
            "node": "Attach Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request Role.txt": {
      "main": [
        [
          {
            "node": "Build context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select QA": {
      "main": [
        [
          {
            "node": "Request Role.txt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recortar CV": {
      "main": [
        [
          {
            "node": "Request Q&A.json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build context": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Carry Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Outputs": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Carry Text": {
      "main": [
        [
          {
            "node": "Request cv.txt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attach Text": {
      "main": [
        [
          {
            "node": "Select QA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0c393696-6ad3-4ebd-b97f-2dc015b400d1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b94a1badad5c74bb198fcbd6d858de30c64abe740262d6937ab4715e01bb04ae"
  },
  "id": "srsN2fzEsxqTUPF8",
  "tags": []
}
